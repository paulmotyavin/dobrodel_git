version: '3.9'

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./backend/graphQL_api
      dockerfile: Dockerfile
    container_name: api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://${DB_USER}:${DB_PASS}@postgres:5432/${DB_NAME}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend-network
    ports:
      - "8000:8000"

  bot:
    build:
      context: ./bot/dobrodel_bot
      dockerfile: Dockerfile
    container_name: bot
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://${DB_USER}:${DB_PASS}@postgres:5432/${DB_NAME}
      API_URL: http://api:8000
    depends_on:
      - postgres
      - api
    networks:
      - backend-network

volumes:
  postgres_data:

networks:
  backend-network:
    driver: bridge